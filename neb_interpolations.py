import matplotlib.pyplot as plt 
import numpy as np
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('filename', help='The interpolation file generated by ORCA', default='neb.interp', nargs='+')
parser.add_argument('-s', '--silent', help='Flag if you want to only see the graph generated without saving it', action='store_true')
parser.add_argument('-o', '--output', help='Output filename for the graph')


args = parser.parse_args()

H = 627.5096080305927


def get_iterp(lines):
    
    flag = False
    x, d, e = [], [], []
    X, D, E = [], [], []
    
    for i in lines:
        if 'Interp.' in i:
            flag = True
        elif flag:
            if i == '\n' or i == '':
                flag = False
                X.append(x)
                D.append(d)
                E.append(e)
                x, d, e = [], [], []
            else:
                a = i.split()
                x.append(float(a[0]))
                d.append(float(a[1]))
                e.append(float(a[2]))

    return X, D, E


def get_images(lines):
    flag = False
    x, d, e = [], [], []
    X, D, E = [], [], []
    
    for i in lines:
        if 'Images' in i:
            flag = True
        elif flag:
            if i == '\n' or i == '':
                flag = False
                X.append(x)
                D.append(d)
                E.append(e)
                x, d, e = [], [], []
            else:
                a = i.split()
                x.append(float(a[0]))
                d.append(float(a[1]))
                e.append(float(a[2]))

    return X, D, E




for file in args.filename:
    with open(file) as f:
        lines = f.readlines()

    X, D, E = get_iterp(lines)
    X_i, D_i, E_i = get_images(lines)

    D = np.array(D)*0.529177
    E = np.array(E)*H

    for idx, i in enumerate(zip(X, E)):
        x, y = i
        c = 'gray' if (idx != 0 and idx != len(E)-1) else 'black' if idx == 0 else 'red'
        alpha = 0.3 if (idx != 0 and idx != len(E)-1) else 0.8 if idx == 0 else 1
        plt.plot(x,y, color=c, alpha=alpha)
        plt.plot(X_i[idx], np.array(E_i[idx])*H, '.', color=c, alpha=alpha)


    plt.title(f'NEB Analysis - {len(X)} iterations')
    plt.xlabel('Reaction coordinate')
    plt.ylabel('âˆ†E [kcal/mol]')

    plt.xlim((0, 1))

    plt.tight_layout()
    if args.silent:
        plt.show()
    else:
        plt.savefig(f'{file.split(".")[0]}.png', dpi=300)


